function ccs_write2graph_gexf(CIJ, fname, labels, coords, colorlist, arcs, misc, misclabel)
%CCS_WRITE2GRAPH_GEXF         Write to Gephi graph format
%
%   ccs_write2graph_gexf(CIJ, fname, labels, coords, colorlist, arcs, misc, misclabel)
%
%   This function writes out a Gephi .gexf file from a MATLAB matrix
%
%   Inputs:     CIJ,        adjacency matrix, NxN matrix
%               fname,      filename minus .gexf extension
%               labels,     labels for nodes, Nx1 cell
%               coords,     (X,Y,Z) coordinates, Nx3 matrix
%               colorlist,  colors for nodes, Nx3 matrix (0 - 255) integers
%               arcs,       1 for directed network
%                           0 for an undirected network
%               misc,       customized node attributes, NxM matrix
%               misclabel,  labels for customized node attributes, Mx1 cell
%
%   Xi-Nian Zuo, IPCAS, 2015/02/26.


N = size(CIJ,1);
fid = fopen(cat(2,fname,'.gexf'), 'w');

%% HEADER
hdl1 = '<?xml version=''1.0'' encoding=''UTF-8''?>';
fprintf(fid, '%s \r', hdl1);
hdl2 = '<gexf xmlns="http://www.gexf.net/1.2draft" version="1.2"';
hdl3 = ' xmlns:viz="http://www.gexf.net/1.2draft/viz"';
hdl4 = ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"';
hdl5 = ' xsi:schemaLocation="http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd">';
fprintf(fid, '%s \r', [hdl2 hdl3 hdl4 hdl5]);
hdl6 = ['  <meta lastmodifieddate="' date '">'];
fprintf(fid, '%s \r', hdl6);
hdl7 = '     <creator>Gephi 0.8.1</creator>';
fprintf(fid, '%s \r', hdl7);
hdl8 = '     <description>A Gephi file generated by CCS scripts (https://github.com/zuoxinian/CCS)</description>';
fprintf(fid, '%s \r', hdl8);
hdl9 = '    <keywords>Gephi, Graph, Network, MATLAB, CCS</keywords>';
fprintf(fid, '%s \r', hdl9);
hdl10 = '  </meta>';
fprintf(fid, '%s \r', hdl10);
if arcs
	hdl11 = '  <graph defaultedgetype="directed" mode="static">';
else
	hdl11 = '  <graph defaultedgetype="undirected" mode="static">';
end
fprintf(fid, '%s \r', hdl11);
%attributes
hdl12 = '    <attributes class="node" mode="static">';
fprintf(fid, '%s \r', hdl12);
hdl13 = '      <attribute id="X" title="X" type="double" />';
fprintf(fid, '%s \r', hdl13);
hdl14 = '      <attribute id="Y" title="Y" type="double" />';
fprintf(fid, '%s \r', hdl14);
hdl15 = '      <attribute id="Z" title="Z" type="double" />';
fprintf(fid, '%s \r', hdl15);
if nargin > 6
    for attII=1:size(misc,2)
        hdlmisc = ['      <attribute id="' misclabel{attII} '" title="' ...
            misclabel{attII} '" type="double" />'];
        fprintf(fid, '%s \r', hdlmisc);
    end
end
hdl16 = '    </attributes>';
fprintf(fid, '%s \r', hdl16);

%% NODES
fprintf(fid, '    <nodes> \r');
for nodeII = 1:N
	ndl = ['      <node id="' num2str(nodeII-1) '" label="' labels{nodeII} '">'];
    fprintf(fid, '%s \r', ndl);
    ndl = '        <attvalues>';
    fprintf(fid, '%s \r', ndl);
    ndl = ['         <attvalue for="X" value="' num2str(coords(nodeII,1)) '" />'];
    fprintf(fid, '%s \r', ndl);
    ndl = ['         <attvalue for="Y" value="' num2str(coords(nodeII,2)) '" />'];
    fprintf(fid, '%s \r', ndl);
    ndl = ['         <attvalue for="Z" value="' num2str(coords(nodeII,3)) '" />'];
    fprintf(fid, '%s \r', ndl);
    if nargin > 6
        for attII=1:size(misc,2)
            ndl = ['         <attvalue for="' misclabel{attII} '" value="' ...
                num2str(misc(nodeII,attII)) '" />'];
            fprintf(fid, '%s \r', ndl);
        end
    end
    ndl = '        </attvalues>';
    fprintf(fid, '%s \r', ndl);
    ndl = ['        <viz:color r="' num2str(colorlist(nodeII,1)) '" g="' ...
        num2str(colorlist(nodeII,2)) '" b="' num2str(colorlist(nodeII,3)) '" />'];
    fprintf(fid, '%s \r', ndl);
    ndl = '      </node>';
    fprintf(fid, '%s \r', ndl);
end
fprintf(fid, '    </nodes> \r');

%% EDGES
fprintf(fid, '    <edges> \r');
for nodeII = 1:N
    for nodeJJ = 1:N
        if CIJ(nodeII,nodeJJ) ~= 0
			edl = ['      <edge source="' num2str(nodeII-1) '" target="' ...
                num2str(nodeJJ-1) '" weight="' num2str(CIJ(nodeII,nodeJJ)) '">'];
            fprintf(fid, '%s \r', edl);
            edl = '      </edge>';
            fprintf(fid, '%s \r', edl);
        end
    end
end
fprintf(fid, '    </edges> \r');

%% CLOSE
fprintf(fid, '  </graph> \r');
fprintf(fid, '</gexf> \r');
fclose(fid);
